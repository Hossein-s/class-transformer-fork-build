{"version":3,"sources":["../../src/ClassTransformOptions.ts"],"names":[],"mappings":"","file":"ClassTransformOptions.js","sourcesContent":["/**\n * Allows to specify a map of Types in the object without using @Type decorator.\n * This is useful when you have external classes.\n */\nexport interface TargetMap {\n\n    /**\n     * Target which Types are being specified.\n     */\n    target: Function;\n\n    /**\n     * List of properties and their Types.\n     */\n    properties: { [key: string]: Function };\n}\n\n/**\n * Options to be passed during transformation.\n */\nexport interface ClassTransformOptions {\n\n    /**\n     * Exclusion strategy. By default exposeAll is used, which means that it will expose all properties are transformed\n     * by default.\n     */\n    strategy?: \"excludeAll\"|\"exposeAll\";\n\n    /**\n     * Indicates if extraneous properties should be excluded from the value when converting a plain value to a class.\n     */\n    excludeExtraneousValues?: boolean;\n\n    /**\n     * Only properties with given groups gonna be transformed.\n     */\n    groups?: string[];\n\n    /**\n     * Only properties with \"since\" > version < \"until\" gonna be transformed.\n     */\n    version?: number;\n\n    /**\n     * Excludes properties with the given prefixes. For example, if you mark your private properties with \"_\" and \"__\"\n     * you can set this option's value to [\"_\", \"__\"] and all private properties will be skipped.\n     * This works only for \"exposeAll\" strategy.\n     */\n    excludePrefixes?: string[];\n\n    /**\n     * If set to true then class transformer will ignore all @Expose and @Exclude decorators and what inside them.\n     * This option is useful if you want to kinda clone your object but do not apply decorators affects.\n     */\n    ignoreDecorators?: boolean;\n\n    /**\n     * Target maps allows to set a Types of the transforming object without using @Type decorator.\n     * This is useful when you are transforming external classes, or if you already have type metadata for\n     * objects and you don't want to set it up again.\n     */\n    targetMaps?: TargetMap[];\n\n\n    /**\n     * If set to true then class transformer will perform a circular check. (circular check is turned off by default)\n     * This option is useful when you know for sure that your types might have a circular dependency.\n     */\n    enableCircularCheck?: boolean;\n\n    /**\n     * If set to true then class transformer will try to convert properties implicitly to their target type based on their typing information.\n     *\n     * DEFAULT: `false`\n     */\n    enableImplicitConversion?: boolean;\n}"],"sourceRoot":"."}